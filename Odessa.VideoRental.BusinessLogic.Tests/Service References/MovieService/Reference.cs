//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.18449
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace Odessa.VideoRental.BusinessLogic.Tests.MovieService {
    
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ServiceModel.ServiceContractAttribute(ConfigurationName="MovieService.IMovieManagement")]
    public interface IMovieManagement {
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IMovieManagement/AddMovie", ReplyAction="http://tempuri.org/IMovieManagement/AddMovieResponse")]
        [System.ServiceModel.FaultContractAttribute(typeof(Odessa.VideoRental.Messages.ExceptionFaultContract), Action="http://tempuri.org/IMovieManagement/AddMovieExceptionFaultContractFault", Name="ExceptionFaultContract", Namespace="http://schemas.datacontract.org/2004/07/Odessa.VideoRental.Messages")]
        Odessa.VideoRental.Messages.ResponseEnvelope<Odessa.VideoRental.Messages.Movie> AddMovie(Odessa.VideoRental.Messages.Movie movie);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IMovieManagement/AddMovie", ReplyAction="http://tempuri.org/IMovieManagement/AddMovieResponse")]
        System.Threading.Tasks.Task<Odessa.VideoRental.Messages.ResponseEnvelope<Odessa.VideoRental.Messages.Movie>> AddMovieAsync(Odessa.VideoRental.Messages.Movie movie);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IMovieManagement/GetAllMovies", ReplyAction="http://tempuri.org/IMovieManagement/GetAllMoviesResponse")]
        [System.ServiceModel.FaultContractAttribute(typeof(Odessa.VideoRental.Messages.ExceptionFaultContract), Action="http://tempuri.org/IMovieManagement/GetAllMoviesExceptionFaultContractFault", Name="ExceptionFaultContract", Namespace="http://schemas.datacontract.org/2004/07/Odessa.VideoRental.Messages")]
        Odessa.VideoRental.Messages.ResponseEnvelope<Odessa.VideoRental.Messages.Movie> GetAllMovies();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IMovieManagement/GetAllMovies", ReplyAction="http://tempuri.org/IMovieManagement/GetAllMoviesResponse")]
        System.Threading.Tasks.Task<Odessa.VideoRental.Messages.ResponseEnvelope<Odessa.VideoRental.Messages.Movie>> GetAllMoviesAsync();
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public interface IMovieManagementChannel : Odessa.VideoRental.BusinessLogic.Tests.MovieService.IMovieManagement, System.ServiceModel.IClientChannel {
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class MovieManagementClient : System.ServiceModel.ClientBase<Odessa.VideoRental.BusinessLogic.Tests.MovieService.IMovieManagement>, Odessa.VideoRental.BusinessLogic.Tests.MovieService.IMovieManagement {
        
        public MovieManagementClient() {
        }
        
        public MovieManagementClient(string endpointConfigurationName) : 
                base(endpointConfigurationName) {
        }
        
        public MovieManagementClient(string endpointConfigurationName, string remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public MovieManagementClient(string endpointConfigurationName, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public MovieManagementClient(System.ServiceModel.Channels.Binding binding, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(binding, remoteAddress) {
        }
        
        public Odessa.VideoRental.Messages.ResponseEnvelope<Odessa.VideoRental.Messages.Movie> AddMovie(Odessa.VideoRental.Messages.Movie movie) {
            return base.Channel.AddMovie(movie);
        }
        
        public System.Threading.Tasks.Task<Odessa.VideoRental.Messages.ResponseEnvelope<Odessa.VideoRental.Messages.Movie>> AddMovieAsync(Odessa.VideoRental.Messages.Movie movie) {
            return base.Channel.AddMovieAsync(movie);
        }
        
        public Odessa.VideoRental.Messages.ResponseEnvelope<Odessa.VideoRental.Messages.Movie> GetAllMovies() {
            return base.Channel.GetAllMovies();
        }
        
        public System.Threading.Tasks.Task<Odessa.VideoRental.Messages.ResponseEnvelope<Odessa.VideoRental.Messages.Movie>> GetAllMoviesAsync() {
            return base.Channel.GetAllMoviesAsync();
        }
    }
}
